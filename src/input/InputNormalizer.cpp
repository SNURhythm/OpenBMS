
#include "InputNormalizer.h"
#include "vkcodes.h"
#include "usb_hid_keys.h"

SDL_Keycode InputNormalizer::normalize(int keyCode, KeySource keySource) {
  // normalize to sdl key
  if (keySource == ScanCode) {
    switch (keyCode) {
    case SCANCODE_0:
      return SDLK_0;
    case SCANCODE_1:
      return SDLK_1;
    case SCANCODE_2:
      return SDLK_2;
    case SCANCODE_3:
      return SDLK_3;
    case SCANCODE_4:
      return SDLK_4;
    case SCANCODE_5:
      return SDLK_5;
    case SCANCODE_6:
      return SDLK_6;
    case SCANCODE_7:
      return SDLK_7;
    case SCANCODE_8:
      return SDLK_8;
    case SCANCODE_9:
      return SDLK_9;
    case SCANCODE_A:
      return SDLK_a;
    case SCANCODE_B:
      return SDLK_b;
    case SCANCODE_C:
      return SDLK_c;
    case SCANCODE_D:
      return SDLK_d;
    case SCANCODE_E:
      return SDLK_e;
    case SCANCODE_F:
      return SDLK_f;
    case SCANCODE_G:
      return SDLK_g;
    case SCANCODE_H:
      return SDLK_h;
    case SCANCODE_I:
      return SDLK_i;
    case SCANCODE_J:
      return SDLK_j;
    case SCANCODE_K:
      return SDLK_k;
    case SCANCODE_L:
      return SDLK_l;
    case SCANCODE_M:
      return SDLK_m;
    case SCANCODE_N:
      return SDLK_n;
    case SCANCODE_O:
      return SDLK_o;
    case SCANCODE_P:
      return SDLK_p;
    case SCANCODE_Q:
      return SDLK_q;
    case SCANCODE_R:
      return SDLK_r;
    case SCANCODE_S:
      return SDLK_s;
    case SCANCODE_T:
      return SDLK_t;
    case SCANCODE_U:
      return SDLK_u;
    case SCANCODE_V:
      return SDLK_v;
    case SCANCODE_W:
      return SDLK_w;
    case SCANCODE_X:
      return SDLK_x;
    case SCANCODE_Y:
      return SDLK_y;
    case SCANCODE_Z:
      return SDLK_z;
    case SCANCODE_APOSTROPHE:
      return SDLK_QUOTE;
    case SCANCODE_BACKSLASH:
      return SDLK_BACKSLASH;
    case SCANCODE_COMMA:
      return SDLK_COMMA;
    case SCANCODE_EQUAL:
      return SDLK_EQUALS;
    case SCANCODE_GRAVE:
      return SDLK_BACKQUOTE;
    case SCANCODE_LEFTBRACE:
      return SDLK_LEFTBRACKET;
    case SCANCODE_MINUS:
      return SDLK_MINUS;
    case SCANCODE_DOT:
      return SDLK_PERIOD;
    case SCANCODE_RIGHTBRACE:
      return SDLK_RIGHTBRACKET;
    case SCANCODE_SEMICOLON:
      return SDLK_SEMICOLON;
    case SCANCODE_SLASH:
      return SDLK_SLASH;
    case SCANCODE_BACKSPACE:
      return SDLK_BACKSPACE;
    case SCANCODE_CAPSLOCK:
      return SDLK_CAPSLOCK;
    case SCANCODE_DELETE:
      return SDLK_DELETE;
    case SCANCODE_DOWN:
      return SDLK_DOWN;
    case SCANCODE_END:
      return SDLK_END;
    case SCANCODE_ESC:
      return SDLK_ESCAPE;
    case SCANCODE_F1:
      return SDLK_F1;
    case SCANCODE_F2:
      return SDLK_F2;
    case SCANCODE_F3:
      return SDLK_F3;
    case SCANCODE_F4:
      return SDLK_F4;
    case SCANCODE_F5:
      return SDLK_F5;
    case SCANCODE_F6:
      return SDLK_F6;
    case SCANCODE_F7:
      return SDLK_F7;
    case SCANCODE_F8:
      return SDLK_F8;
    case SCANCODE_F9:
      return SDLK_F9;
    case SCANCODE_F10:
      return SDLK_F10;
    case SCANCODE_F11:
      return SDLK_F11;
    case SCANCODE_F12:
      return SDLK_F12;
    case SCANCODE_HOME:
      return SDLK_HOME;
    case SCANCODE_INSERT:
      return SDLK_INSERT;
    case SCANCODE_LEFT:
      return SDLK_LEFT;
    case SCANCODE_LEFTALT:
      return SDLK_LALT;
    case SCANCODE_LEFTCTRL:
      return SDLK_LCTRL;
    case SCANCODE_LEFTMETA:
      return SDLK_LGUI;
    case SCANCODE_LEFTSHIFT:
      return SDLK_LSHIFT;
    case SCANCODE_PAGEDOWN:
      return SDLK_PAGEDOWN;
    case SCANCODE_PAGEUP:
      return SDLK_PAGEUP;
    case SCANCODE_RIGHT:
      return SDLK_RIGHT;
    case SCANCODE_RIGHTALT:
      return SDLK_RALT;
    case SCANCODE_RIGHTCTRL:
      return SDLK_RCTRL;
    case SCANCODE_RIGHTMETA:
      return SDLK_RGUI;
    case SCANCODE_RIGHTSHIFT:
      return SDLK_RSHIFT;
    case SCANCODE_SPACE:
      return SDLK_SPACE;
    case SCANCODE_TAB:
      return SDLK_TAB;
    case SCANCODE_UP:
      return SDLK_UP;
    case SCANCODE_NUMLOCK:
      return SDLK_NUMLOCKCLEAR;
    case SCANCODE_KPSLASH:
      return SDLK_KP_DIVIDE;
    case SCANCODE_KPASTERISK:
      return SDLK_KP_MULTIPLY;
    case SCANCODE_KPMINUS:
      return SDLK_KP_MINUS;
    case SCANCODE_KPPLUS:
      return SDLK_KP_PLUS;
    case SCANCODE_KPENTER:
      return SDLK_KP_ENTER;
    case SCANCODE_KP1:
      return SDLK_KP_1;
    case SCANCODE_KP2:
      return SDLK_KP_2;
    case SCANCODE_KP3:
      return SDLK_KP_3;
    case SCANCODE_KP4:
      return SDLK_KP_4;
    case SCANCODE_KP5:
      return SDLK_KP_5;
    case SCANCODE_KP6:
      return SDLK_KP_6;
    case SCANCODE_KP7:
      return SDLK_KP_7;
    case SCANCODE_KP8:
      return SDLK_KP_8;
    case SCANCODE_KP9:
      return SDLK_KP_9;
    case SCANCODE_KP0:
      return SDLK_KP_0;
    case SCANCODE_KPDOT:
      return SDLK_KP_PERIOD;
    case SCANCODE_KPEQUAL:
      return SDLK_KP_EQUALS;
    default:
      return SDLK_UNKNOWN;
    }
  }
  if (keySource == VirtualKey) {
    switch (keyCode) {
    case VK_KEY_0:
      return SDLK_0;
    case VK_KEY_1:
      return SDLK_1;
    case VK_KEY_2:
      return SDLK_2;
    case VK_KEY_3:
      return SDLK_3;
    case VK_KEY_4:
      return SDLK_4;
    case VK_KEY_5:
      return SDLK_5;
    case VK_KEY_6:
      return SDLK_6;
    case VK_KEY_7:
      return SDLK_7;
    case VK_KEY_8:
      return SDLK_8;
    case VK_KEY_9:
      return SDLK_9;
    case VK_KEY_A:
      return SDLK_a;
    case VK_KEY_B:
      return SDLK_b;
    case VK_KEY_C:
      return SDLK_c;
    case VK_KEY_D:
      return SDLK_d;
    case VK_KEY_E:
      return SDLK_e;
    case VK_KEY_F:
      return SDLK_f;
    case VK_KEY_G:
      return SDLK_g;
    case VK_KEY_H:
      return SDLK_h;
    case VK_KEY_I:
      return SDLK_i;
    case VK_KEY_J:
      return SDLK_j;
    case VK_KEY_K:
      return SDLK_k;
    case VK_KEY_L:
      return SDLK_l;
    case VK_KEY_M:
      return SDLK_m;
    case VK_KEY_N:
      return SDLK_n;
    case VK_KEY_O:
      return SDLK_o;
    case VK_KEY_P:
      return SDLK_p;
    case VK_KEY_Q:
      return SDLK_q;
    case VK_KEY_R:
      return SDLK_r;
    case VK_KEY_S:
      return SDLK_s;
    case VK_KEY_T:
      return SDLK_t;
    case VK_KEY_U:
      return SDLK_u;
    case VK_KEY_V:
      return SDLK_v;
    case VK_KEY_W:
      return SDLK_w;
    case VK_KEY_X:
      return SDLK_x;
    case VK_KEY_Y:
      return SDLK_y;
    case VK_KEY_Z:
      return SDLK_z;
    case VK_OEM_1:
      return SDLK_SEMICOLON;
    case VK_OEM_2:
      return SDLK_SLASH;
    case VK_OEM_3:
      return SDLK_BACKQUOTE;
    case VK_OEM_4:
      return SDLK_LEFTBRACKET;
    case VK_OEM_5:
      return SDLK_BACKSLASH;
    case VK_OEM_6:
      return SDLK_RIGHTBRACKET;
    case VK_OEM_7:
      return SDLK_QUOTE;
    case VK_OEM_COMMA:
      return SDLK_COMMA;
    case VK_OEM_PLUS:
      return SDLK_EQUALS;
    case VK_OEM_MINUS:
      return SDLK_MINUS;
    case VK_OEM_PERIOD:
      return SDLK_PERIOD;
    case VK_BACK:
      return SDLK_BACKSPACE;
    case VK_CAPITAL:
      return SDLK_CAPSLOCK;
    case VK_DELETE:
      return SDLK_DELETE;
    case VK_DOWN:
      return SDLK_DOWN;
    case VK_END:
      return SDLK_END;
    case VK_ESCAPE:
      return SDLK_ESCAPE;
    case VK_F1:
      return SDLK_F1;
    case VK_F2:
      return SDLK_F2;
    case VK_F3:
      return SDLK_F3;
    case VK_F4:
      return SDLK_F4;
    case VK_F5:
      return SDLK_F5;
    case VK_F6:
      return SDLK_F6;
    case VK_F7:
      return SDLK_F7;
    case VK_F8:
      return SDLK_F8;
    case VK_F9:
      return SDLK_F9;
    case VK_F10:
      return SDLK_F10;
    case VK_F11:
      return SDLK_F11;
    case VK_F12:
      return SDLK_F12;
    case VK_HOME:
      return SDLK_HOME;
    case VK_INSERT:
      return SDLK_INSERT;
    case VK_LEFT:
      return SDLK_LEFT;
    case VK_LMENU:
      return SDLK_LALT;
    case VK_LCONTROL:
      return SDLK_LCTRL;
    case VK_LWIN:
      return SDLK_LGUI;
    case VK_LSHIFT:
      return SDLK_LSHIFT;
    case VK_NEXT:
      return SDLK_PAGEDOWN;
    case VK_PRIOR:
      return SDLK_PAGEUP;
    case VK_RIGHT:
      return SDLK_RIGHT;
    case VK_RMENU:
      return SDLK_RALT;
    case VK_RCONTROL:
      return SDLK_RCTRL;
    case VK_RWIN:
      return SDLK_RGUI;
    case VK_RSHIFT:
      return SDLK_RSHIFT;
    case VK_SPACE:
      return SDLK_SPACE;
    case VK_TAB:
      return SDLK_TAB;
    case VK_UP:
      return SDLK_UP;
    case VK_NUMLOCK:
      return SDLK_NUMLOCKCLEAR;
    case VK_DIVIDE:
      return SDLK_KP_DIVIDE;
    case VK_MULTIPLY:
      return SDLK_KP_MULTIPLY;
    case VK_SUBTRACT:
      return SDLK_KP_MINUS;
    case VK_ADD:
      return SDLK_KP_PLUS;
    case VK_RETURN:
      return SDLK_RETURN;
    case VK_NUMPAD1:
      return SDLK_KP_1;
    case VK_NUMPAD2:
      return SDLK_KP_2;
    case VK_NUMPAD3:
      return SDLK_KP_3;
    case VK_NUMPAD4:
      return SDLK_KP_4;
    case VK_NUMPAD5:
      return SDLK_KP_5;
    case VK_NUMPAD6:
      return SDLK_KP_6;
    case VK_NUMPAD7:
      return SDLK_KP_7;
    case VK_NUMPAD8:
      return SDLK_KP_8;
    case VK_NUMPAD9:
      return SDLK_KP_9;
    case VK_NUMPAD0:
      return SDLK_KP_0;
    case VK_DECIMAL:
      return SDLK_KP_PERIOD;
    default:
      return SDLK_UNKNOWN;
    }
  }

  return keyCode;
}
